<!DOCTYPE html>
<html>
  <head>
    <title>SC2 Mafia</title>
    <link rel="icon" href="/static/images/favicon.ico">
    <link rel="stylesheet" href="/static/css/base.css">
    <link rel="stylesheet" href="/static/css/room.css">
  </head>
  <body>
    <header>
      <nav>
        <a href="/lobby" rel="home">
          <img src="/static/images/logo.png" alt="logo" id="logo">
          <h1>SC2 Mafia</h1>
        </a>
        <ul>
          <li><a href="/about" rel="about">소개</a></li>
          <li><a href="/lobby" rel="lobby">로비</a></li>
          <li><a href="/archive" rel="archive">기록실</a></li>
        </ul>
      </nav>
    </header>
    <form class="" action="/lobby" method="get">
      <button type="submit" name="button">나가기</button>
    </form>
    <section class="main">
      <ul id="messages"></ul>
      <form onsubmit="send_message(event);" class="message_input_form">
        <input id="chat" autocomplete="off" placeholder="여기에 할말 입력"/>
        <button class="send_message_button">전송</button>
      </form>
    </section>
  </body>
  <script src="/static/js/socket.io.js" charset="utf-8"></script>
  <script type="text/javascript">
    'use strict';
    const Socket = io.connect('http://localhost:8090');
    let chatLog = document.getElementById('messages');

    function updateScroll () {
      let chatBox = document.querySelector('#messages');
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    Socket.emit('enter_GameRoom', {
      'roomID': {{roomID}},
    })

    function addchat(message) {
      let chat = document.createElement('li');
      chat.innerHTML = message;
      chatLog.appendChild(chat);
      updateScroll();
    }

    Socket.on('event', (data)=> {
      console.log(data);
      switch (data['type']) {
        case 'message':
          addchat(data['who']+': '+data['message']);
          break;
        case 'enter':
          addchat(data['who']+'님이 입장했습니다.');
          break;
        case 'leave':
          addchat(data['who']+'님이 퇴장했습니다.');
          break;
        case 'newhost':
          addchat(data['who']+'님이 방장이 되었습니다.');
          break;
        case 'game_over':
          addchat('게임이 끝났습니다. 승자들은 '+data['winner']+' 등입니다.');
          break;
        case 'role':
          addchat('당신의 직업은 '+data['role']+'입니다.');
          break;
        case 'state':
          addchat(data['state']+'가 되었습니다.');
          break;
        case 'vote':
          addchat(data['voter']+'님이 '+data['voted']+'님에게 투표했습니다.');
          break;
        case 'vote_execution':
          addchat(data['voter']+'님이 투표했습니다.');
          break;
        case 'vote_cancel':
          addchat(data['voter']+'님이 투표를 취소했습니다.');
          break;
        case 'visit':
          if (data['target2']) {
            addchat('오늘 밤 '+data['target1']+'님을 '+data['target2']+'님에게 가게 합니다.')
          } else {
            addchat('오늘 밤 '+data['target1']+'님을 방문합니다.');
          }
          break;
        case 'alert':
          if (data['alert']) {
            addchat('오늘 밤 경계를 섭니다.');
          } else {
            addchat('오늘 밤은 쉬기로 합니다.');
          }
          break;
        case 'sound':
          if (data['dead']) {
            addchat(data['sound']+'의 소리가 들립니다...대상은 죽었습니다!');
          } else {
            addchat(data['sound']+'의 소리가 들립니다...그러나 대상은 죽지 않았습니다.');
          }
          break;
        case 'wear_vest':
          if (data['wear_vest']) {
            addchat('방탄조끼를 입었습니다.');
          } else {
            addchat('방탄조끼를 벗었습니다.');
          }
          break;
        case 'Witch_control_success':
          addchat('당신은'+data['target1']+'님을 '+data['target2']+'님에게 가도록 조종했습니다.');
          break;
        case 'controlled_by_Witch':
          addchat('마녀에게 조종당하고 있습니다!');
          break;
        case 'blocked':
          addchat('아리따운 누군가가 당신에게 찾아왔습니다. 당신은 그녀와 황홀한 밤을 보냈습니다. 능력이 차단되었습니다.');
          break;
        case 'oiling_success':
          addchat('당신은 '+data['target1']+'님에게 기름을 묻혔습니다.');
          break;
        case 'someone_visited_to_Veteran':
          addchat('누군가가 경계 중인 당신을 찾아왔습니다. 당신은 그와 유익한 거래를 하기 위해 총을 꺼냅니다.');
          break;
        case 'visited_Veteran':
          if (data['with_Bodyguard']) {
            addchat('당신이 방문한 대상은 경계 중인 퇴역군인이었습니다! 당신은 경호원과 함께 그와 싸웠습니다.');
          } else {
            addchat('당신이 방문한 대상은 경계 중인 퇴역군인이었습니다!');
          }
          break;
        case 'fighted_with_Bodyguard':
          addchat('당신을 방문한 대상은 경호원이 호위하고 있었습니다! 당신은 그의 경호원과 싸웠습니다. 당신은 거의 죽을 뻔했습니다!');
          break;
        case 'almost_suicide':
          addchat('당신은 당신의 목을 조르려 했습니다. 당신은 거의 죽을 뻔 했습니다!');
          break;
        case 'check_result':
          addchat('대상을 조사한 결과: '+ data['result']);
          break;
        case 'dead':
          if (data['dead_while_guarding']) {
            addchat('당신은 '+data['attacker']+'에게서 대상을 지키고 대신 사망했습니다.');
          } else {
            addchat('당신은 '+data['attacker']+'에게 죽었습니다.');
          }
          break;
        case 'attacked':
          addchat('당신은 '+data['attacker']+'에게 공격당했습니다.');
          break;
        case 'healed':
          addchat('당신은 '+data['attacker']+'에게 공격당했습니다.');
          addchat('그러나 '+data['healer']+'가 당신을 살려주었습니다.');
          break;
        case 'bodyguarded':
          addchat('당신은 '+data['attacker']+'에게 공격당했습니다.');
          addchat('그러나 경호원이 당신을 보호해주었습니다.');
          break;
        case 'suicide':
          switch (data['reason']) {
            case '고의':
              addchat('당신은 자살했습니다.');
              break;
            case '어릿광대':
              addchat('당신은 어릿광대를 죽였다는 죄책감에 못이겨 자살했습니다.');
              break;
          }
          break;
      }
    });

    Socket.on('message', (data)=> {
      console.log(data);
      addchat(data);
    });

    function send_message(event) {
      event.preventDefault();
      let chatInput = document.querySelector('#chat')
      let message = chatInput.value;
      Socket.emit('message', message);
      chatInput.value = '';
    };
  </script>
</html>
